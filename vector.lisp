(in-package #:3dmath)

(defun make-vec2 (&optional (x 0.0) (y 0.0))
  (make-array 2 :element-type 'single-float :initial-contents (list x y)))

(defun make-vec3 (&optional (x 0.0) (y 0.0) (z 0.0))
  (make-array 3 :element-type 'single-float :initial-contents (list x y z)))

(defun make-vec4 (&optional (x 0.0) (y 0.0) (z 0.0) (w 0.0))
  (make-array 4 :element-type 'single-float :initial-contents (list x y z w)))

(defun vec-x (v)
  (aref v 0))

(defun vec-y (v)
  (aref v 1))

(defun vec-z (v)
  (aref v 2))

(defun vec-w (v)
  (aref v 3))

(defun vec2-sqlength (p)
  (let ((x (vec-x p))
        (y (vec-y p)))
    (+ (* x x)
       (* y y))))

(defun vec3-sqlength (p)
  (let ((x (vec-x p))
        (y (vec-y p))
        (z (vec-z p)))
    (+ (* x x)
       (* y y)
       (* z z))))

(defun vec4-sqlength (p)
  (let ((x (vec-x p))
        (y (vec-y p))
        (z (vec-z p))
        (w (vec-w p)))
    (+ (* x x)
       (* y y)
       (* z z)
       (* w w))))

(defun vec2-sub (p q)
  (make-vec2 (- (vec-x p)
                (vec-x q))
             (- (vec-y p)
                (vec-y q))))

(defun vec3-sub (p q)
  (make-vec3 (- (vec-x p)
                (vec-x q))
             (- (vec-y p)
                (vec-y q))
             (- (vec-z p)
                (vec-z q))))

(defun vec4-sub (p q)
  (make-vec4 (- (vec-x p)
                (vec-x q))
             (- (vec-y p)
                (vec-y q))
             (- (vec-z p)
                (vec-z q))
             (- (vec-w p)
                (vec-w q))))

(defun vec2-length (p)
  (sqrt (vec2-sqlength p)))

(defun vec3-length (p)
  (sqrt (vec3-sqlength p)))

(defun vec4-length (p)
  (sqrt (vec4-sqlength p)))

(defun vec2-distance (p q)
  (vec2-length (vec2-sub p q)))

(defun vec3-distance (p q)
  (vec3-length (vec3-sub p q)))

(defun vec4-distance (p q)
  (vec4-length (vec4-sub p q)))

(defun vec2-scale (scale p)
  (make-vec2 (* scale (vec-x p))
             (* scale (vec-y p))))

(defun vec3-scale (scale p)
  (make-vec3 (* scale (vec-x p))
             (* scale (vec-y p))
             (* scale (vec-z p))))

(defun vec4-scale (scale p)
  (make-vec4 (* scale (vec-x p))
             (* scale (vec-y p))
             (* scale (vec-z p))
             (* scale (vec-w p))))

(defun vec2-normalize (p)
  (let ((length (vec2-length p)))
    (make-vec2 (/ (vec-x p) length)
               (/ (vec-y p) length))))

(defun vec3-normalize (p)
  (let ((length (vec3-length p)))
    (make-vec3 (/ (vec-x p) length)
               (/ (vec-y p) length)
               (/ (vec-z p) length))))

(defun vec4-normalize (p)
  (let ((length (vec4-length p)))
    (make-vec4 (/ (vec-x p) length)
               (/ (vec-y p) length)
               (/ (vec-z p) length)
               (/ (vec-w p) length))))

(defun vec2-projection (p q)
  (let ((p-dot-q (vec2-dot p q))
        (q-sqlength (vec2-sqlength q)))
    (vec2-scale (/ p-dot-q q-sqlength) q)))

(defun vec3-projection (p q)
  (let ((p-dot-q (vec3-dot p q))
        (q-sqlength (vec3-sqlength q)))
    (vec3-scale (/ p-dot-q q-sqlength) q)))

(defun vec4-projection (p q)
  (let ((p-dot-q (vec4-dot p q))
        (q-sqlength (vec4-sqlength q)))
    (vec4-scale (/ p-dot-q q-sqlength) q)))

(defun vec2-equal (p q)
  (and (= (vec-x p)
          (vec-x q))
       (= (vec-y p)
          (vec-y q))))

(defun vec3-equal (p q)
  (and (= (vec-x p)
          (vec-x q))
       (= (vec-y p)
          (vec-y q))
       (= (vec-z p)
          (vec-z q))))

(defun vec4-equal (p q)
  (and (= (vec-x p)
          (vec-x q))
       (= (vec-y p)
          (vec-y q))
       (= (vec-z p)
          (vec-z q))
       (= (vec-w p)
          (vec-w q))))

(defun vec2-add (p q)
  (make-vec2 (+ (vec-x p)
                (vec-x q))
             (+ (vec-y p)
                (vec-y q))))

(defun vec3-add (p q)
  (make-vec3 (+ (vec-x p)
                (vec-x q))
             (+ (vec-y p)
                (vec-y q))
             (+ (vec-z p)
                (vec-z q))))

(defun vec4-add (p q)
  (make-vec4 (+ (vec-x p)
                (vec-x q))
             (+ (vec-y p)
                (vec-y q))
             (+ (vec-z p)
                (vec-z q))
             (+ (vec-w p)
                (vec-w q))))

(defun vec2-dot (p q)
  (+ (* (vec-x p)
        (vec-x q))
     (* (vec-y p)
        (vec-y q))))

(defun vec3-dot (p q)
  (+ (* (vec-x p)
        (vec-x q))
     (* (vec-y p)
        (vec-y q))
     (* (vec-z p)
        (vec-z q))))

(defun vec4-dot (p q)
  (+ (* (vec-x p)
        (vec-x q))
     (* (vec-y p)
        (vec-y q))
     (* (vec-z p)
        (vec-z q))
     (* (vec-w p)
        (vec-w q))))

(defun vec3-cross (p q)
  (make-vec3 (- (* (vec-y p)
                   (vec-z q))
                (* (vec-y q)
                   (vec-z p)))
             (- (* (vec-x q)
                   (vec-z p))
                (* (vec-x p)
                   (vec-z q)))
             (- (* (vec-x p)
                   (vec-y q))
                (* (vec-x q)
                   (vec-y p)))))
